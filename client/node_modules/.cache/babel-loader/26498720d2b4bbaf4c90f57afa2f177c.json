{"ast":null,"code":"var _jsxFileName = \"/Users/djsicrip/Documents/WorkSpace/hausboot/client/src/pages/hausboot-rot/hausboot-rot.component.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { getEvents } from '../../fetch';\nimport BookingCalendar from 'react-booking-calendar';\nimport { CalendarWrapper, Container } from './hausboot-rot.styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst HausbootRot = () => {\n  _s();\n\n  const [startDate, setStartDate] = useState([]);\n  const [endDate, setEndDate] = useState([]); // get the range between start and end date\n\n  const getDaysArray = function (start, end) {\n    for (var arr = [], dt = new Date(start); dt <= end - 1; dt.setDate(dt.getDate() + 1)) {\n      arr.push(new Date(dt));\n    }\n\n    return arr;\n  };\n\n  const getAllDates = () => {\n    var arr = [];\n\n    for (var i in startDate) {\n      let dateRange = getDaysArray(new Date(startDate[i]), new Date(endDate[i]));\n      arr.push(dateRange.map(date => date));\n    }\n\n    return arr;\n  };\n\n  const AllDates = getAllDates(); //merge arrays in one array\n\n  const mergeDedupe = arr => {\n    return [...new Set([].concat(...arr))];\n  };\n\n  useEffect(() => {\n    const fetchData = () => {\n      getEvents(events => setStartDate(events.map(event => event.start))); //fetch start date\n\n      getEvents(events => setEndDate(events.map(event => event.end))); //fetch end date\n    };\n\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(BookingContainer, {\n      children: /*#__PURE__*/_jsxDEV(CalendarWrapper, {\n        children: [/*#__PURE__*/_jsxDEV(BookingCalendar, {\n          bookings: mergeDedupe(AllDates),\n          disableHistory: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 3\n  }, this);\n};\n\n_s(HausbootRot, \"eNEU1ObWOFD5s0Wwwhd+B8XJsFc=\");\n\n_c = HausbootRot;\nexport default HausbootRot;\n\nvar _c;\n\n$RefreshReg$(_c, \"HausbootRot\");","map":{"version":3,"sources":["/Users/djsicrip/Documents/WorkSpace/hausboot/client/src/pages/hausboot-rot/hausboot-rot.component.js"],"names":["React","useState","useEffect","getEvents","BookingCalendar","CalendarWrapper","Container","HausbootRot","startDate","setStartDate","endDate","setEndDate","getDaysArray","start","end","arr","dt","Date","setDate","getDate","push","getAllDates","i","dateRange","map","date","AllDates","mergeDedupe","Set","concat","fetchData","events","event"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA,OAAOC,eAAP,MAA4B,wBAA5B;AACA,SAASC,eAAT,EAA0BC,SAA1B,QAA2C,uBAA3C;;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACzB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,EAAD,CAAtC,CAFyB,CAIzB;;AACA,QAAMW,YAAY,GAAG,UAAUC,KAAV,EAAiBC,GAAjB,EAAsB;AAC1C,SAAK,IAAIC,GAAG,GAAG,EAAV,EAAcC,EAAE,GAAG,IAAIC,IAAJ,CAASJ,KAAT,CAAxB,EAAyCG,EAAE,IAAIF,GAAG,GAAG,CAArD,EAAwDE,EAAE,CAACE,OAAH,CAAWF,EAAE,CAACG,OAAH,KAAe,CAA1B,CAAxD,EAAsF;AACrFJ,MAAAA,GAAG,CAACK,IAAJ,CAAS,IAAIH,IAAJ,CAASD,EAAT,CAAT;AACA;;AACD,WAAOD,GAAP;AACA,GALD;;AAOA,QAAMM,WAAW,GAAG,MAAM;AACzB,QAAIN,GAAG,GAAG,EAAV;;AACA,SAAK,IAAIO,CAAT,IAAcd,SAAd,EAAyB;AACxB,UAAIe,SAAS,GAAGX,YAAY,CAAC,IAAIK,IAAJ,CAAST,SAAS,CAACc,CAAD,CAAlB,CAAD,EAAyB,IAAIL,IAAJ,CAASP,OAAO,CAACY,CAAD,CAAhB,CAAzB,CAA5B;AACAP,MAAAA,GAAG,CAACK,IAAJ,CAASG,SAAS,CAACC,GAAV,CAAeC,IAAD,IAAUA,IAAxB,CAAT;AACA;;AACD,WAAOV,GAAP;AACA,GAPD;;AASA,QAAMW,QAAQ,GAAGL,WAAW,EAA5B,CArByB,CAuBzB;;AACA,QAAMM,WAAW,GAAIZ,GAAD,IAAS;AAC5B,WAAO,CAAC,GAAG,IAAIa,GAAJ,CAAQ,GAAGC,MAAH,CAAU,GAAGd,GAAb,CAAR,CAAJ,CAAP;AACA,GAFD;;AAIAb,EAAAA,SAAS,CAAC,MAAM;AACf,UAAM4B,SAAS,GAAG,MAAM;AACvB3B,MAAAA,SAAS,CAAE4B,MAAD,IAAYtB,YAAY,CAACsB,MAAM,CAACP,GAAP,CAAYQ,KAAD,IAAWA,KAAK,CAACnB,KAA5B,CAAD,CAAzB,CAAT,CADuB,CACkD;;AACzEV,MAAAA,SAAS,CAAE4B,MAAD,IAAYpB,UAAU,CAACoB,MAAM,CAACP,GAAP,CAAYQ,KAAD,IAAWA,KAAK,CAAClB,GAA5B,CAAD,CAAvB,CAAT,CAFuB,CAE8C;AACrE,KAHD;;AAKAgB,IAAAA,SAAS;AACT,GAPQ,EAON,EAPM,CAAT;AASA,sBACC;AAAA,2BACC,QAAC,gBAAD;AAAA,6BACC,QAAC,eAAD;AAAA,gCACC,QAAC,eAAD;AAAiB,UAAA,QAAQ,EAAEH,WAAW,CAACD,QAAD,CAAtC;AAAkD,UAAA,cAAc;AAAhE;AAAA;AAAA;AAAA;AAAA,gBADD,eAEC;AAAA;AAAA;AAAA;AAAA,gBAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,UADD;AAUA,CA/CD;;GAAMnB,W;;KAAAA,W;AAiDN,eAAeA,WAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { getEvents } from '../../fetch';\n\nimport BookingCalendar from 'react-booking-calendar';\nimport { CalendarWrapper, Container } from './hausboot-rot.styles';\n\nconst HausbootRot = () => {\n\tconst [startDate, setStartDate] = useState([]);\n\tconst [endDate, setEndDate] = useState([]);\n\n\t// get the range between start and end date\n\tconst getDaysArray = function (start, end) {\n\t\tfor (var arr = [], dt = new Date(start); dt <= end - 1; dt.setDate(dt.getDate() + 1)) {\n\t\t\tarr.push(new Date(dt));\n\t\t}\n\t\treturn arr;\n\t};\n\n\tconst getAllDates = () => {\n\t\tvar arr = [];\n\t\tfor (var i in startDate) {\n\t\t\tlet dateRange = getDaysArray(new Date(startDate[i]), new Date(endDate[i]));\n\t\t\tarr.push(dateRange.map((date) => date));\n\t\t}\n\t\treturn arr;\n\t};\n\n\tconst AllDates = getAllDates();\n\n\t//merge arrays in one array\n\tconst mergeDedupe = (arr) => {\n\t\treturn [...new Set([].concat(...arr))];\n\t};\n\n\tuseEffect(() => {\n\t\tconst fetchData = () => {\n\t\t\tgetEvents((events) => setStartDate(events.map((event) => event.start))); //fetch start date\n\t\t\tgetEvents((events) => setEndDate(events.map((event) => event.end))); //fetch end date\n\t\t};\n\n\t\tfetchData();\n\t}, []);\n\n\treturn (\n\t\t<div>\n\t\t\t<BookingContainer>\n\t\t\t\t<CalendarWrapper>\n\t\t\t\t\t<BookingCalendar bookings={mergeDedupe(AllDates)} disableHistory />\n\t\t\t\t\t<div></div>\n\t\t\t\t</CalendarWrapper>\n\t\t\t</BookingContainer>\n\t\t</div>\n\t);\n};\n\nexport default HausbootRot;\n"]},"metadata":{},"sourceType":"module"}